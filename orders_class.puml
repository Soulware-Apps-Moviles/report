@startuml diagram
package "Orders Context - Domain Layer" {

  ' =======================
  ' === Aggregates & Entities
  ' =======================
  class Order {
    + OrderId id
    + List<Orderline> orderlines
    + OrderStatus status
    + Client client
    + ShopId shopId
    --
    + getTotal(): int
    + accept(): void
    + reject(): void
    + cancel(): void
    + markAsReady(): void
    + markAsPickedUp(): void
    + markAsDispatched(): void
    + markAsDelivered(): void
  }

  class Orderline {
    + OrderlineId id
    + String productName
    + Decimal unitPrice
    + int quantity
    + CatalogItemId catalogItemId
    --
    + getSubtotal()
  }

  enum OrderStatus {
    PLACED
    ACCEPTED
    REJECTED
    CANCELED
    READY
    PICKED_UP
    DISPATCHED 
    DELIVERED
  }

  enum PaymentMethod {
    ON_CREDIT
    CASH
    VIRTUAL
  }

  enum DeliveryMethod {
    STORE_P√çCK_UP
    DELIVERY
  }

  class Client {
    + ClientId id
    + PersonName personName
    + UserId userId
    --
    + getFullName(): string
  }

  class ClientId <<ValueObject>> {
    + UUID value
  }

  class OrderId <<ValueObject>> {
    + UUID value
  }

  class OrderlineId <<ValueObject>> {
    + UUID value
  }

  Order "1" o-- "*" Orderline : contains >
  Order -right-> OrderId
  Order --> Client
  Orderline --> OrderlineId
  Order --> OrderStatus
  Order --> PaymentMethod
  Order -left-> DeliveryMethod
  Client --> ClientId

  ' =======================
  ' === Commands
  ' =======================
  class PlaceOrderCommand {
    + OrderId orderId
  }

  class AcceptOrderCommand {
    + OrderId orderId
  }

  class RejectOrderCommand {
    + OrderId orderId
  }

  class CancelOrderCommand {
    + OrderId orderId
  }

  class MarkOrderAsReadyCommand {
    + OrderId orderId
  }

  class MarkOrderAsDispatchedCommand {
    + OrderId orderId
  }

  class MarkOrderAsDeliveredCommand {
    + OrderId orderId
  }

  ' =======================
  ' === Queries
  ' =======================
  class GetSuitableShopsQuery {
    + OrderId orderId
  }

  ' =======================
  ' === Services
  ' =======================
  interface ProductCommandService {
    + handle(command: PlaceOrderCommand)
    + handle(command: AcceptOrderCommand)
    + handle(command: RejectOrderCommand)
    + handle(command: CancelOrderCommand)
    + handle(command: MarkOrderAsReadyCommand)
    + handle(command: MarkOrderAsDispatchedCommand)
    + handle(command: MarkOrderAsDeliveredCommand)
  }

  interface ProductQueryService {
    + handle(query: GetSuitableShopsQuery)
  }

  ' =======================
  ' === Relationships
  ' =======================
  ProductCommandService --> Order
  ProductQueryService --> Order
}
@enduml
